﻿﻿@using WendlandtVentas.Core.Entities.Enums
@using WendlandtVentas.Core.Models.OrderViewModels
@model OrderViewModel


<h4 class="mb-3">
    <a asp-action="Index" asp-controller="Order" title="Regresar" class="btn btn-sm btn-secondary">
        <i class="fa fa-fw fa-arrow-left"></i>
    </a>
    @ViewData["Title"]
    <br />
</h4>

<form id="forma-order" asp-action="@ViewData["Action"]" asp-antiforgery="true" class="forma-ajax">
    @Html.HiddenFor(c => c.IsInvoice)
    @Html.HiddenFor(c => c.Type)
    @Html.HiddenFor(c => c.Address)
    @Html.HiddenFor(c => c.AddressName)

    @if (Model.Id > 0)
    {
        @Html.HiddenFor(c => c.Id)
    }

    <div class="row">
        <div class="col-12 col-lg-9">
            <div class="card card-body">
                <div class="row">
                    @if (Model.IsInvoice != OrderType.Export && Model.IsInvoice != OrderType.Return)
                    {
                        <div class="col-12 col-sm-5 col-md-4 col-lg-3 col-xl-2 mb-3 mb-sm-0 mr-sm-5 mr-lg-auto">
                            <div class="form-group">
                                <label asp-for="IsInvoice" class="pb-1"></label>
                                <br />
                                <div class="form-check">
                                    <label class="form-check-label">
                                        <input type="radio" class="form-check-input radio-invoice" name="IsInvoice" value="@OrderType.Remission" @(Model.IsInvoice == OrderType.Remission ? "checked" : string.Empty)>Remisión
                                    </label>
                                </div>
                                @if (Model.Id == 0)
                                {
                                    <div id="export-check" class="form-check">
                                        <label class="form-check-label">
                                            <input type="radio" class="form-check-input radio-invoice" name="IsInvoice" value="@OrderType.Export" @(Model.IsInvoice == OrderType.Export ? "checked" : string.Empty)>Exportación
                                        </label>
                                    </div>
                                }
                                <div class="form-check">
                                    <label class="form-check-label">
                                        <input type="radio" class="form-check-input radio-invoice" name="IsInvoice" value="@OrderType.Invoice" @(Model.IsInvoice == OrderType.Invoice ? "checked" : string.Empty)>Facturación
                                    </label>
                                </div>
                                @if (Model.Id == 0)
                                {
                                    <div id="return-check" class="form-check">
                                        <label class="form-check-label">
                                            <input type="radio" class="form-check-input radio-invoice" name="IsInvoice" value="@OrderType.Return" @(Model.IsInvoice == OrderType.Return ? "checked" : string.Empty)>Devolución
                                        </label>
                                    </div>
                                }
                                <!--COMENTADO HASTA QUE SE HABILITE EN PRODUCCION-->
                            <div class="form-check mt-2">
                            <input asp-for="ProntoPago" class="form-check-input" id="early-payment-check" />
                            <label class="form-check-label" for="early-payment-check">¿Pronto pago?</label>
                            </div>
                            </div>
                        </div>
                    }
                    <div class="col-12 col-sm-6 col-md-4 col-lg-4 col-xl-3 mb-3 mb-sm-0" id="invoice" @(Model.IsInvoice == OrderType.Invoice ? string.Empty : "hidden")>
                        <div class="form-group">
                            <label asp-for="InvoiceCode"></label>
                            <input asp-for="InvoiceCode" class="form-control" readonly />
                            <span asp-validation-for="InvoiceCode" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-12 col-md-12 col-lg col-xl">
                        <div class="form-group">
                            <label asp-for="ClientId"></label> <b class="text-danger">*</b>
                            @Html.DropDownListFor(m => m.ClientId, Model.Clients, "Seleccionar cliente", new { @class = "form-control select2", @style = "width:100%;" })
                            <span asp-validation-for="ClientId" class="text-danger"></span>
                        </div>
                    </div>
                </div>
                <section id="noreturn" class="@(Model.IsInvoice == OrderType.Return ? "d-none" : "")">
                    <div class="row">
                        <div class="col-12 col-lg col-xl">
                            <div class="form-group">
                                <label asp-for="AddressId"></label>
                                @Html.DropDownListFor(m => m.AddressId, Model.Addresses, "Seleccionar dirección", new { @class = "form-control select2", @style = "width:100%;" })
                                <span asp-validation-for="AddressId" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12 col-lg col-xl">
                            <div class="form-group">
                                <label asp-for="DeliverySpecification"></label>
                                <input asp-for="DeliverySpecification" class="form-control" />
                                <span asp-validation-for="DeliverySpecification" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-6 col-sm-4 col-md-3 col-lg-2 col-xl-2 mb-3 mb-sm-0">
                            <div class="form-group">
                                <label asp-for="PaymentPromiseDate"></label>
                                <input asp-for="PaymentPromiseDate" class="form-control date-picker" autocomplete="off" />
                                <span asp-validation-for="PaymentPromiseDate" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-6 col-sm-4 col-md-3 col-lg-2 col-xl-2 mb-3 mb-sm-0">
                            <div class="form-group">
                                <label asp-for="PaymentDate"></label>
                                <input asp-for="PaymentDate" class="form-control date-picker" autocomplete="off" />
                                <span asp-validation-for="PaymentDate" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-6 col-sm-4 col-md-3 col-lg-2 col-xl-2">
                            <div class="form-group">
                                <label asp-for="DeliveryDay"></label>
                                <input asp-for="DeliveryDay" class="form-control date-picker" autocomplete="off" />
                                <span asp-validation-for="DeliveryDay" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-6 col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <div class="form-group">
                                <label asp-for="PayType"></label>
                                @Html.DropDownListFor(m => m.PayType, Model.PayTypes, new { @class = "form-control select2", @style = "width:100%;" })
                                <span asp-validation-for="PayType" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-12 col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <div class="form-group">
                                <label asp-for="CurrencyType"></label>
                                @Html.DropDownListFor(m => m.CurrencyTypes, Model.CurrencyTypes, new { @class = "form-control select2", @style = "width:100%;" })
                                <input asp-for="CurrencyType" value="@Model.CurrencyType" class="form-control" type="hidden" />
                                <span asp-validation-for="CurrencyType" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12 col-lg-12 col-xl-12">
                            <div class="form-group">
                                <label asp-for="Comment"></label>
                                <input asp-for="Comment" class="form-control" />
                                <span asp-validation-for="Comment" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                </section>
                <section id="return" class="@(Model.IsInvoice != OrderType.Return ? "d-none" : "")">
                    <div class="row">
                        <div class="col-12 col-md-4 col-lg-3 mb-3 mb-md-0">
                            <div class="form-group">
                                <label asp-for="ReturnRemisionNumber"></label>
                                @Html.DropDownListFor(m => m.ReturnRemisionNumber, Model.ReturnRemisionNumberOptions, new { @class = "form-control select2", @style = "width:100%;" })
                                <span asp-validation-for="ReturnRemisionNumber" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-12 col-md-8 col-lg-9">
                            <div class="form-group">
                                <label asp-for="ReturnReason"></label>
                                <input asp-for="ReturnReason" value="@Model.ReturnReason" class="form-control" />
                                <span asp-validation-for="ReturnReason" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
            <div class="card">
                <div class="card-header bg-gray-200">
                    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center">
                        <h4 class="mb-2 mb-md-0">Productos</h4>
                        @if (Model.CanEditProducts)
                        {
                            <div class="mt-2 mt-md-0">
                                <button type="button" id="addProduct" class="btn btn-link btn-modal-action"><i class="fa fa-plus"></i> Agregar producto</button>
                            </div>
                        }
                    </div>
                </div>
                <div class="card-body">
                    <div class="p-2 p-sm-3 border">
                        <div class="row border-bottom p-2 d-none d-sm-flex">
                            <div class="col-12 col-sm-4"><b>Producto</b></div>
                            <div class="col-6 col-sm-2 text-sm-right"><b>Precio</b></div>
                            <div class="col-6 col-sm-2 text-sm-right"><b>Cantidad</b></div>
                            <div class="col-6 col-sm-2 text-sm-right"><b>Subtotal</b></div>
                            <div class="col-6 col-sm-2"></div>
                        </div>
                        <div id="content-products" class="pt-2">
                            @if (Model.ProductsEdit.Any())
                            {
                                foreach (var item in Model.ProductsEdit)
                                {
                                    @await Html.PartialAsync("_RowProduct", item)
                                }
                            }
                            else
                            {
                                <label>No se encontraron elementos</label>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="card mt-3">
                <div class="card-header bg-gray-200">
                    <h4 class="mb-0">Promociones aplicadas</h4>
                </div>
                <div id="content-promotions" class="card-body">
                    @if (Model.PresentationPromotionsEdit.Any())
                    {
                        foreach (var item in Model.PresentationPromotionsEdit)
                        {
                            @await Html.PartialAsync("_RowPromotion", item)
                        }
                    }
                    else
                    {
                        <label>No se encontraron elementos</label>
                    }
                </div>
            </div>
        </div>
        <div class="col-12 col-md-4 col-lg-3 order-md-last mb-4 mb-lg-0">
            <div class="sticky-top" style="top: 20px;">
                <div class="card summary-card">
                    <div class="card-body">
                        <!-- Versión para pantallas medianas/grandes -->
                        <div class="d-none d-md-block">
                            <div class="row align-items-center mb-2">
                                <div class="col">
                                    <h5 class="mb-0">Subtotal</h5>
                                </div>
                                <div class="col-auto text-right">
                                    <h5 class="mb-0 subtotal-order">$0.00 MXN</h5>
                                </div>
                            </div>
                            <div class="row align-items-center mb-2">
                                <div class="col">
                                    <h5 class="mb-0">Descuentos</h5>
                                </div>
                                <div class="col-auto text-right">
                                    <h5 class="mb-0 discount-order">$0.00 MXN</h5>
                                </div>
                            </div>
                            <div class="row align-items-center mb-3 mt-2">
                                <div class="col">
                                    <h4 class="mb-0">Total</h4>
                                </div>
                                <div class="col-auto text-right">
                                    <h4 class="mb-0 text-success total-order">$0.00 MXN</h4>
                                </div>
                            </div>
                            <div class="text-muted small mb-3">
                                Total antes de impuestos.
                            </div>
                            <div class="d-flex justify-content-between pt-2">
                                <a asp-action="Index" asp-controller="Order" title="Regresar" class="btn btn-secondary flex-grow-1 mr-2">
                                    Cancelar
                                </a>
                                <button type="button" class="btn btn-primary flex-grow-1 ml-2 btn-guardar">Guardar</button>
                            </div>
                        </div>

                        <!-- Versión para móviles -->
                        <div class="d-md-none">
                            <div class="text-center mb-3">
                                <h5>Subtotal</h5>
                                <h4 class="subtotal-order">$0.00 MXN</h4>
                            </div>
                            <div class="text-center mb-3">
                                <h5>Descuentos</h5>
                                <h4 class="discount-order">$0.00 MXN</h4>
                            </div>
                            <div class="text-center mb-3">
                                <h4>Total</h4>
                                <h3 class="text-success total-order">$0.00 MXN</h3>
                            </div>
                            <div class="text-muted small mb-3 text-center">
                                Total antes de impuestos.
                            </div>
                            <div class="d-grid gap-2">
                                <button type="button" class="btn btn-primary btn-lg btn-guardar">Guardar</button>
                                <a asp-action="Index" asp-controller="Order" title="Regresar" class="btn btn-secondary btn-lg">
                                    Cancelar
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-errores text-danger mt-2"></div>
                <div class="alerts mt-2"></div>
            </div>
        </div>
    </div>
    <!-- Modal de confirmación -->
    <div class="modal fade" id="confirmarGuardadoModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmación</h5>
                </div>
                <div class="modal-body">
                    El pedido se guardará como <strong class="tipo-orden-texto">[tipo]</strong>.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary" id="confirmarEnvio">Confirmar</button>
                </div>
            </div>
        </div>
    </div>
</form>

@section Modals {
    <div class="modal" id="addProductModal" tabindex="false" role="dialog" aria-labelledby="addProductModal-label"></div>
    <div class="modal modal-focus-first" id="addPromotionsModal" tabindex="-1" role="dialog" aria-labelledby="addModal-label" data-url="@Url.Action("AddPromotions")"></div>
    <div class="modal" id="balanceModal" tabindex="-1" role="dialog" aria-labelledby="balanceModal-label" data-url="@Url.Action("ShowBalance")"></div>
}
@section Scripts {
    <script>
        $(document).ready(function () {

            // Abrir modal y configurar Select2 usando caché si existe
            $("#addProduct").on("click", function () {
                const currencyType = $('#CurrencyType').val();

                $.get("@Url.Action("AddProduct", "Order")", { currencyType: currencyType })
                    .done(function (data) {
                        const $modal = $('#addProductModal');
                        $modal.html(data);
                        $modal.modal('show');

                        // Botón Guardar dentro del modal (no tiene id en tu markup)
                        const $btnSave = $modal.find('button[type="submit"]');
                        $btnSave.prop('disabled', true);

                        // Select del modal
                        const $select = $modal.find('.select2');

                        // --- Intentar usar datos precargados en sessionStorage ---
                        // Opción A (preload global): clave simple que sugerimos en el preloader
                        const globalCacheKey = `products_${currencyType}`;
                        let globalCache = null;
                        try {
                            const raw = sessionStorage.getItem(globalCacheKey);
                            if (raw) globalCache = JSON.parse(raw);
                        } catch (e) {
                            // ignorar errores de parseo
                        }

                        // Si tienes caché granular por página/término, detecta cualquiera
                        const hasGranularCache = (function () {
                            for (let i = 0; i < sessionStorage.length; i++) {
                                const k = sessionStorage.key(i);
                                if (k && k.startsWith(`products_${currencyType}_`)) return true;
                            }
                            return false;
                        })();

                        // Si hay caché global y trae results, preinyecta opciones al <select>
                        if (globalCache && Array.isArray(globalCache.results)) {
                            const opts = [];
                            for (const item of globalCache.results) {
                                if (!item || typeof item.id === 'undefined') continue;
                                // Evitar duplicados si el servidor ya generó opciones
                                if ($select.find(`option[value="${item.id}"]`).length === 0) {
                                    opts.push(new Option(item.text || item.name || item.id, item.id, false, false));
                                }
                            }
                            if (opts.length) $select.append(opts);
                        }

                        // Inicializar Select2 con AJAX + transport con caché (granular o global)
                        var cacheKey = "products_MXN_all_1";
                        var cachedData = JSON.parse(sessionStorage.getItem(cacheKey) || "null") || { results: [] };

                        $('#addProductModal .select2').select2({
                            theme: 'bootstrap4',
                            placeholder: "Seleccionar producto",
                            minimumInputLength: 0,
                            data: cachedData.results,
                            matcher: function (params, data) {
                                if ($.trim(params.term) === '') return data;
                                if (data.text.toLowerCase().indexOf(params.term.toLowerCase()) > -1) return data;
                                return null;
                            }
                        });

                        // Cuando selecciona un producto, obtener precio y habilitar guardar
                        $select.on('select2:select', function (e) {
                            $btnSave.prop('disabled', true);

                            const value = e.params.data.id;
                            const parts = String(value).split("-");
                            const id = parts[0];

                            $.get("@Url.Action("GetProductPrice", "Order")", {
                                currencyType: currencyType,
                                id: id
                            }).done(function (data) {
                                $('#Price').val(data);
                                $btnSave.prop('disabled', false);
                            }).fail(function () {
                                $btnSave.prop('disabled', false);
                            });
                        });

                        // Limpieza al cerrar modal (evita fugas de memoria)
                        $modal.off('hidden.bs.modal._cleanup').on('hidden.bs.modal._cleanup', function () {
                            try { $select.select2('destroy'); } catch (e) { }
                            $modal.empty();
                        });
                    });
            });

            // Tu lógica existente de CurrencyTypes
            $('#CurrencyTypes').attr('disabled', 'disabled');
            $('#CurrencyTypes').on('change', function () {
                $('#content-promotions').html('');
                $('#CurrencyType').val($(this).val());
                CalculateTotals();
            });

            function toggleRequiredFields() {
                const selected = $('input[name="OrderType"]:checked').val();

                if (selected === "Devolucion") {
                    $('#PaymentPromiseDate, #PaymentDate, #DeliveryDay')
                        .prop('required', false)
                        .closest('.form-group').hide();
                } else {
                    $('#PaymentPromiseDate, #PaymentDate, #DeliveryDay')
                        .prop('required', true)
                        .closest('.form-group').show();
                }
            }

            // Detectar cambios
            $(document).on('change', 'input[name="OrderType"]', toggleRequiredFields);

            // Ejecutar al inicio
            toggleRequiredFields();



        });
    </script>


    <script>
        let confirmedSubmit = false;

        // Listener para cambio de cliente y tipo de facturación
        // Listener para cambio de cliente y tipo de facturación
        async function handleInvoiceAndClientChanges() {
            const clientId = $('#ClientId').val();
            const selectedRadio = document.querySelector('input[name="IsInvoice"]:checked');
            const invoiceType = selectedRadio ? selectedRadio.value : null;
            const $saveButton = $('#btn-guardar');

            console.log("Tipo de facturación seleccionado:", invoiceType);

            // Si NO es facturación, habilitamos el botón y ocultamos mensajes
            if (invoiceType !== "@OrderType.Invoice") {
                $saveButton.prop('disabled', false);
                $('.modal-errores').empty().hide();
                return;
            }

            // Si ES facturación, verificamos los requisitos
            if (!clientId) {
                console.warn("Para facturación, debe seleccionar un cliente");
                $saveButton.prop('disabled', true);
                $('.modal-errores').html(`
                    <div class="alert alert-warning">
                        Debe seleccionar un cliente para facturación
                    </div>
                `).show();
                return;
            }

            // Verificamos el RFC solo para facturación con cliente seleccionado
            const hasValidRFC = await checkClientRFCAsync();
            $saveButton.prop('disabled', !hasValidRFC);
        }

        // Evento para cambios en el cliente
        $('#ClientId').on('change', handleInvoiceAndClientChanges);

        // Evento para cambios en los radio buttons
        $('input[name="IsInvoice"]').on('change', handleInvoiceAndClientChanges);

        // Ejecutamos al cargar la página para validación inicial
        $(document).ready(function () {
            handleInvoiceAndClientChanges();
        });

        async function checkClientRFCAsync() {
            const clientId = $('#ClientId').val();
            if (!clientId) return false;

            try {
                const response = await $.get("@Url.Action("CheckClientRFC", "Order")", { clientId });
                if (!response.hasRFC) {
                    $('.modal-errores').html(`
                        <div class="alert alert-warning">
                            ${response.message || "Este cliente no tiene RFC registrado."}
                        </div>
                    `).show();
                    return false;
                } else {
                    $('.modal-errores').empty().hide();
                    return true;
                }
            } catch (err) {
                console.error("Error al verificar RFC", err);
                $('.modal-errores').html(`
                    <div class="alert alert-danger">
                        Error al verificar el RFC del cliente.
                    </div>
                `).show();
                return false;
            }
        }

        $(document).ready(function () {
            let confirmarEnvio = false;

            // Interceptamos el click en el botón "Guardar"
            $('.btn-guardar').on('click', function (e) {
                e.preventDefault(); // Evita que se envíe aún

                // Obtener el tipo de orden seleccionado
                let radioSeleccionado = $('input[name="IsInvoice"]:checked');

                if (radioSeleccionado.length) {
                    // Obtenemos el texto de la etiqueta asociada al radio button
                    radioSeleccionado = radioSeleccionado.closest('.form-check').find('.form-check-label').text().trim();
                }
                // Actualizar el texto en el modal
                $('.tipo-orden-texto').text(radioSeleccionado);
                $('#confirmarGuardadoModal').modal('show'); // Muestra el modal
            });

            // Al confirmar desde el modal
            $('#confirmarEnvio').on('click', function () {
                confirmarEnvio = true;
                $('#confirmarGuardadoModal').modal('hide');
                $('#forma-order').submit(); // Envía el formulario
            });

            // Opcional: evitar doble envío si alguien confirma muchas veces
            $('#forma-order').on('submit', function (e) {
                if (!confirmarEnvio) {
                    e.preventDefault(); // Si no viene del modal, bloquea
                }
            });
        });
     
    </script>
    
    <script>
        $(function () {
            $(".date-picker").datepicker({
                autoclose: true,
                format: 'dd/mm/yyyy',
                theme: 'bootstrap4'
            });
            $(".select2").select2({
                placeholder: $(this).attr('placeholder'),
                allowClear: true,
                theme: 'bootstrap4'
            });

            CalculateTotals();
        });

        $('.radio-invoice').change(function () {
            $('#IsInvoice').val($(this).val());
            $('#CurrencyType').val('MXN');
            $('#CurrencyTypes').val('MXN').change();

            if ($(this).val() == "Remission") {
                $('#CurrencyTypes').removeAttr('disabled');
            }
            else if ($(this).val() == "Export") {
                $('#CurrencyTypes').val('USD').change();
                $('#CurrencyType').val('USD');
                $('#CurrencyTypes').attr('disabled', 'disabled');
            }
            else if ($(this).val() == "Invoice") {
                $('#CurrencyTypes').attr('disabled', 'disabled');
            }
        });

        $(".forma-ajax").ajaxForm(opcionesForma);

        var opcionesForma = {
            beforeSubmit: prepararPeticion,
            success: ejecutarRespuestaFormaCustom,
            error: mostrarError
        };

        function ejecutarRespuestaFormaCustom(responseText, statusText, xhr, $form) {
            var json = responseText;
            $form.find('button[type="submit"]').prop("disabled", false);
            monoloading('hide');
            $form.find(".modal-errores").html("");
            $form.find(".alerts").html("");
            switch (json.status) {
                case 'ok':
                    $form.resetForm();
                    window.location.href = '/Order';
                    monotoast(json.body);
                    break;
                case 'error':
                    $form.find(".modal-errores").html(`<p>${json.body}</p>`);
                    break;
                case 'warning':
                    $form.find(".alerts").html(`<div class="alert alert-warning alert-dismissible fade show" role="alert">
                                                                     <strong>Acción inválida: </strong>
                                                                       ${json.body}
                                                                       <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                                                          <span aria-hidden="true">&times;</span>
                                                                       </button>
                                                                   </div>`);
                    $form.find(".alert").alert()
                    break;
            }
        }

        $('input:radio[name=IsInvoice]').on('change', function () {
            if ($(this).parent('label').text().includes('Facturación'))
                $('#invoice').removeAttr('hidden');
            else
                $('#invoice').attr('hidden', '');

            if ($(this).parent('label').text().includes('Devolución')) {
                $('#return').removeClass('d-none');
                $('#noreturn').addClass('d-none');

            }
            else {
                $('#return').addClass('d-none');
                $('#noreturn').removeClass('d-none');
            }

        });
    </script>


    <script>
        $('#ClientId').change(function () {
            //Comentado temporalmente para poder cambiar de cliente al editar orden
            //$('#content-promotions').html('');
            //$('#content-products').html('<label>No se encontraron elementos</label>');
            //$('.subtotal-order').text('$0.00 ' + $('#CurrencyType').val());
            //$('.discount-order').text('$0.00 ' + $('#CurrencyType').val());
            //$('.total-order').text('$0.00 ' + $('#CurrencyType').val());
            //$(".modal-errores").html("");
            //$(".alerts").html("");
            const clientId = $(this).val();
            monoloading("show");

            $.get("@Url.Action("ValidateClientOrders", "Order")", { clientId: clientId }, function (responseText) {
                var json = responseText;
                var $form = $('#forma-order');
                $form.find('button[type="submit"]').prop("disabled", false);
                monoloading('hide');
                $form.find(".alerts").html("");

                switch (json.status) {
                    case 'ok':
                        $.get("@Url.Action("GetClientAddresses", "Order")", { clientId: clientId },
                            function (data) {
                                const addressSelect = $('#AddressId');
                                addressSelect.empty();
                                if (data.status == 'Ok') {
                                    $.each(data.body, function () {
                                        addressSelect.append($('<option/>').val(this.value).text(this.text));
                                    });
                                } else {
                                    addressSelect.append($('<option/>').val(null).text("Seleccionar dirección"));
                                    monotoast(data.body);
                                }
                                monoloading("hide");
                            });

                        $.get("@Url.Action("GetBalances", "Order")", { clientId: clientId })
                            .done(function (data) {
                                $('#balanceModal').html(data);
                                $('#balanceModal').modal({ show: true, backdrop: 'static', keyboard: false });
                            });
                        break;
                    case 'error':
                        break;
                    case 'warning':
                        $form.find('button[type="submit"]').prop("disabled", true);
                        $form.find(".alerts").html(`<div class="alert alert-warning alert-dismissible fade show" role="alert">
                                                                 <strong>Acción inválida: </strong>
                                                                   ${json.body}
                                                                   <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                                                      <span aria-hidden="true">&times;</span>
                                                                   </button>
                                                               </div>`);
                        $form.find(".alert").alert()
                        break;
                }
            });
        });

        //Agregar elementos a la tabla productos
        $('#addProductModal').on('submit', '#form-addProduct', function (e) {
            e.preventDefault();
            monoloading("show");
            var error = "Ha ocurrido un error inesperado.";
            const $form = $(this);
            const $modal = $('#addProductModal');
            var isValid = $form.valid();
            var $container = $('#content-products');
            var selectKeyValues = $form.find("#ProductPresentationId").val().split("-");
            var clientId = $('#ClientId').val();
            const productPresentationId = selectKeyValues[0];
            const presentationId = selectKeyValues[1];
            const quantity = $form.find("#Quantity").val();
            const isPresent = $form.find("#IsPresent").is(":checked");
            const price = $form.find("#Price").val();
            var existPresentation = false;
            var currencyType = $('#CurrencyType').val();

            if ($('.presentation-' + presentationId)[0]) {
                existPresentation = true;
            }

            if (clientId <= 0) {
                isValid = false;
                error = "Es necesario seleccionar un cliente.";
            }

            $.each($container.find('.row-product'), function (key, value) {
                if ($(this).attr('id') == productPresentationId) {
                    isValid = false;
                    error = "Este producto ya se encuentra registrado.";
                }
            });

            if (isValid) {
                if ($container.find('.row-product').length == 0) {
                    $container.html("");
                }
                $.post("@Url.Action("AddProductRow", "Order")",
                    { ProductPresentationId: productPresentationId, Quantity: quantity, ExistPresentation: existPresentation, IsPresent: isPresent, Price: price, CurrencyType: currencyType },
                    function (data) {
                        monoloading("hide");
                        $modal.modal("hide");

                        if (existPresentation == true) {
                            if (isPresent) {
                                $('#content-' + presentationId).append(data);
                            } else {
                                var element = $('#content-' + presentationId).find("a").first();
                                $(data).insertAfter(element);
                            }
                        } else {
                            $container.append(data);
                        }
                        CheckPromotions();
                    });
            } else {
                monoloading("hide");
                monotoast(error);
            }
        });

        //Borrar elementos de la tabla productos
        $('#content-products').on('click', '.btn-delete-row', function () {
            var $containerPresentation = $(this).parents('.presentation');
            var $containerProducts = $('#content-products');
            var presentationId = $containerPresentation.data('presentation');

            $(this).parents('.row-product').remove();

            if ($containerPresentation.find('.row-product').length == 0) {
                $containerPresentation.remove();
            }

            if ($containerProducts.find('.row-product').length == 0) {
                $containerProducts.html(" <label>No se encontraron elementos</label>");
            }

            DeletePromotions(presentationId);
            CheckPromotions();
        });

        //Promociones
        function CheckPromotions() {
            var presentationQuantities = GetQuantityPresentation('.presentation');
            var clientId = $('#ClientId').val();
            var currencyType = $('#CurrencyType').val();

            $.post("@Url.Action("CheckPromotions", "Order")", { clientId: clientId, presentationQuantities: presentationQuantities, currencyType: currencyType },
                function (data) {
                    monoloading("hide");
                    $('.btn-promotion').addClass('d-none');
                    $.each(data, function (key, item) {
                        $('#btn-promotion-' + item.Value).removeClass('d-none')
                    });
                });

            CalculateTotals();
        }

        function GetQuantityPresentation(content) {
            var presentationQuantities = [];
            $(content).each(function () {
                var productQuantities = [];
                $(this).find('.row-product').each(function () {
                    productQuantities.push({
                        productId: $(this).data('product'),
                        quantity: $(this).data('quantity'),
                        isPresent: $(this).find('input[name ="ProductIsPresent"]').val(),
                        price: $(this).data('price')
                    })
                });
                presentationQuantities.push({
                    presentationId: $(this).data('presentation'),
                    productQuantities: productQuantities
                });
            });
            return presentationQuantities;
        }

        function CalculateQuantityPresentation(presentationId) {
            var quantity = 0;
            $('#content-' + presentationId).find('.row-product').each(function () {
                quantity = quantity + parseInt($(this).data('quantity'));
            });
            return quantity;
        }

        //Borrar promociones de la sección de promociones.
        function DeletePromotions(presentationId) {
            var $content = $('#content-promotions');
            $content.find('#promotion-presentation-' + presentationId).remove();

            if ($content.find('#promotion-presentation').length == 0) {
                $content.html(" <label>No se encontraron elementos</label>");
            }
        }
        ///// fin promociones

        //Abir modal de promociones
        $('#content-products').on('click', '.btn-promotion', function (e) {
            e.preventDefault();
            var clientId = $('#ClientId').val();
            var $containerPresentation = $(this).parents('.presentation');
            var presentationId = $containerPresentation.data('presentation');
            var presentationQuantities = GetQuantityPresentation('#content-' + presentationId);
            var $btn = $(this);
            var modalId = $btn.attr("href");
            var $modal = $(modalId);
            var $container = $modal;
            var currencyType = $('#CurrencyType').val();
            monoloading("show");
            $.post('@Url.Action("AddPromotions", "Order")', { clientId: clientId, presentationQuantities: presentationQuantities, currencyType: currencyType },
                function (data) {
                    monoloading("hide");
                    $container.html(data);

                    var $form = $modal.find("form");
                    if (!$.isEmptyObject($form)) {
                        $.validator.unobtrusive.parse($form);
                    }
                    $container.find(".forma-ajax--modal").ajaxForm(opcionesFormaModal);
                    $modal.on('hidden.bs.modal',
                        function () {
                            $container.html(null);
                        });

                    $modal.modal("show");
                }).fail(mostrarErrorSnack);
        });

        //Calcular cantidad disponible en modal de promociones
        $('#addPromotionsModal').on('click', '.check-promotion', function () {
            var $tagAvailable = $('#available-quantity');
            var totalBuy = parseInt($(this).data('totalbuy'));
            var available = parseInt($tagAvailable.text());

            if ($(this).is(':checked')) {
                available = available - totalBuy;
                $tagAvailable.text(available);
            } else {
                available = available + totalBuy;
                $tagAvailable.text(available);
            }
            ValidatePromotionModal(available);
        });

        function ValidatePromotionModal(available) {
            if (available == 0) {
                $('.check-promotion:checkbox').each(function () {
                    if (!$(this).is(':checked')) {
                        $(this).attr("disabled", true);
                    }
                });
            } else {
                $('.check-promotion:checkbox').each(function () {
                    if (!$(this).is(':checked')) {
                        var totalBuy = parseInt($(this).data('totalbuy'));
                        if (totalBuy > available) {
                            $(this).attr("disabled", true);
                        } else {
                            $(this).attr("disabled", false);
                        }
                    }
                });
            }
        }

        //Agregar promociones a la sección de promociones
        $('#addPromotionsModal').on('submit', '#form-addPromotions', function (e) {
            e.preventDefault();
            monoloading("show");
            var $form = $(this);
            var $modal = $('#addPromotionsModal');
            var isValid = $form.valid();
            var $containerPromotions = $('#content-promotions');
            var presentation = $modal.find('#presentation').val();
            var presentationId = $modal.find('#presentationId').val();
            var promotions = [];
            $('.check-promotion:checkbox:checked').each(function () {
                var products = [];
                $('.products-promotion-' + $(this).data('i') + '-' + $(this).val()).each(function () {
                    products.push({
                        id: $(this).data('id'),
                        name: $(this).data('name'),
                        price: $(this).data('price'),
                        quantity: $(this).data('quantity'),
                        presentationId: presentationId
                    })
                });
                promotions.push({
                    id: $(this).val(),
                    name: $(this).data('name'),
                    Products: products,
                    presentationId: presentationId
                });
            });

            if (isValid) {

                if ($containerPromotions.find('.promotion-presentation').length == 0) {
                    $containerPromotions.html("");
                }
                $.post("@Url.Action("AddPromotionsRow", "Order")", { PresentationId: presentationId, Presentation: presentation, Promotions: promotions },
                    function (data) {
                        var $containerPromotionPresentation = $('#promotion-presentation-' + presentationId);
                        if ($containerPromotionPresentation[0]) {
                            $containerPromotionPresentation.html('');
                            $containerPromotionPresentation.append(data)
                        } else {
                            $containerPromotions.append(data)
                        }
                        CalculateTotals();
                        monoloading("hide");
                        $modal.modal("hide");
                    });
            } else {
                monoloading("hide");
                $modal.find(".modal-errors").html(error);
            }
        });

        //Calcular totales de la orden
        function CalculateTotals() {
            var formatter = new Intl.NumberFormat('es-MX', {
                style: 'currency',
                currency: 'MXN'
            });
            var subtotal = 0;
            var discount = 0;
            var total = 0;

            $('.row-product').each(function () {

                var isPresent = $(this).find('input[name ="ProductIsPresent"]').val();

                if (isPresent === "false") {
                    subtotal = subtotal + parseFloat($(this).data('subtotal'));
                }
            });
            $('.discount-presentation').each(function () {
                discount = discount + parseFloat($(this).val());
            });
            total = subtotal - discount;
            $('.subtotal-order').text(formatter.format(subtotal.toFixed(2)) + ' ' + $('#CurrencyType').val());
            $('.discount-order').text(formatter.format(discount.toFixed(2)) + ' ' + $('#CurrencyType').val());
            $('.total-order').text(formatter.format(total.toFixed(2)) + ' ' + $('#CurrencyType').val());
        }
    </script>
  

}